{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/Presale.sol:Presale": {
        "src": "contracts/Presale.sol:8",
        "version": {
          "withMetadata": "9f1071863b7bbffa1cb67210408aeb436dd385e3c78faa390017f826faac1408",
          "withoutMetadata": "5fb08acf619c544fb43efc0950c32fd83611770accce5c7635a2c01ccd3cc7e7",
          "linkedWithoutMetadata": "5fb08acf619c544fb43efc0950c32fd83611770accce5c7635a2c01ccd3cc7e7"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "participate(address)",
          "claimTokens()",
          "claimRefund()",
          "withdrawReferralEarnings()",
          "completePresale()",
          "withdrawFunds()",
          "addToWhitelist(address[])",
          "removeFromWhitelist(address[])",
          "toggleEmergencyStop()",
          "recoverUnclaimedFunds()",
          "getClaimableTokens(address)",
          "getRefundAmount(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts/Presale.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/Presale.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "presaleEndTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:20"
            },
            {
              "label": "totalRaised",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:21"
            },
            {
              "label": "totalReferralEarnings",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:22"
            },
            {
              "label": "emergencyStop",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Presale",
              "src": "contracts/Presale.sol:23"
            },
            {
              "label": "contributions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:26"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:27"
            },
            {
              "label": "referrers",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:28"
            },
            {
              "label": "referralEarnings",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:29"
            },
            {
              "label": "whitelist",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/AirdropDistributor.sol:AirdropDistributor": {
        "src": "contracts/AirdropDistributor.sol:9",
        "version": {
          "withMetadata": "61d6aa6c3e2448c771ee515823cb658bbda3cee3254285abee75f7c0ae36943c",
          "withoutMetadata": "9a7bbd16d52e48d3c783055280ca9673750d0f7287e5dbb19cdc42c4d83c0c4e",
          "linkedWithoutMetadata": "9a7bbd16d52e48d3c783055280ca9673750d0f7287e5dbb19cdc42c4d83c0c4e"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "airdrop(address[],uint256[])",
          "recoverTokens(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AirdropDistributor",
            "src": "contracts/AirdropDistributor.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/AirdropDistributor.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/BuyBack.sol:Buyback": {
        "src": "contracts/BuyBack.sol:8",
        "version": {
          "withMetadata": "240520d144c201ab26b58d5019f257e3f09c8945e5759cdc52698b336ec76db5",
          "withoutMetadata": "158f6d58a2e4b290cf70830b7609027054ca59eb3b26cdf0642ccedb8f74703d",
          "linkedWithoutMetadata": "158f6d58a2e4b290cf70830b7609027054ca59eb3b26cdf0642ccedb8f74703d"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "()",
          "executeBuyback()",
          "updateBuybackConfig(address,address,uint256)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Buyback",
            "src": "contracts/BuyBack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/BuyBack.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/BuyBack.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/BuyBack.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryShare",
            "src": "contracts/BuyBack.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippageTolerance",
            "src": "contracts/BuyBack.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Buyback",
              "src": "contracts/BuyBack.sol:13"
            },
            {
              "label": "burnAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Buyback",
              "src": "contracts/BuyBack.sol:14"
            },
            {
              "label": "treasuryShare",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Buyback",
              "src": "contracts/BuyBack.sol:15"
            },
            {
              "label": "slippageTolerance",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Buyback",
              "src": "contracts/BuyBack.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/LiquidityManager.sol:LiquidityManager": {
        "src": "contracts/LiquidityManager.sol:10",
        "version": {
          "withMetadata": "d767950a3ac27008151f144d3d3db031f5d1f13a3f97a59ea5cabe5c3a423be1",
          "withoutMetadata": "78cf99e606f737255c5c32b9fe40c957f69637a0c8510f638331b5c5480103cb",
          "linkedWithoutMetadata": "78cf99e606f737255c5c32b9fe40c957f69637a0c8510f638331b5c5480103cb"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "addLiquidity(uint256,uint256,uint256,uint256,uint256)",
          "removeLiquidity(address,uint256,uint256,uint256,uint256)",
          "updateConfig(address,uint256,uint256)",
          "emergencyWithdraw(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidityManager",
            "src": "contracts/LiquidityManager.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/LiquidityManager.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/LiquidityManager.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/LiquidityManager.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minLiquidityAmount",
            "src": "contracts/LiquidityManager.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippageTolerance",
            "src": "contracts/LiquidityManager.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "lpTokenReceiver",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidityManager",
              "src": "contracts/LiquidityManager.sol:15"
            },
            {
              "label": "minLiquidityAmount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LiquidityManager",
              "src": "contracts/LiquidityManager.sol:16"
            },
            {
              "label": "slippageTolerance",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidityManager",
              "src": "contracts/LiquidityManager.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/Presale.sol:Presale": {
        "src": "contracts/Presale.sol:8",
        "version": {
          "withMetadata": "60f61c90fcf92ba287bb3b67cf43e2338897ca36cb65f7f50a1d44f2c4fd14cc",
          "withoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68",
          "linkedWithoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "participate()",
          "claimRefund()",
          "completePresale()",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts/Presale.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/Presale.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "presaleEndTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:13"
            },
            {
              "label": "totalRaised",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:14"
            },
            {
              "label": "contributions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/VestingVault.sol:VestingVault": {
        "src": "contracts/VestingVault.sol:8",
        "version": {
          "withMetadata": "46b960fca078579e876f80aecad6cf6a8f8b71c2436578383320460b881824d5",
          "withoutMetadata": "faf4511325b4282fbfadfbee6e1594fcd37e3e670c7e7e75570db0c10cbfe62f",
          "linkedWithoutMetadata": "faf4511325b4282fbfadfbee6e1594fcd37e3e670c7e7e75570db0c10cbfe62f"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool)",
          "release()",
          "revokeVesting(address)",
          "vestedAmount(address)",
          "recoverExcessTokens(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingVault",
            "src": "contracts/VestingVault.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/VestingVault.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "vestingSchedules",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(VestingSchedule)2088_storage)",
              "contract": "VestingVault",
              "src": "contracts/VestingVault.sol:20"
            },
            {
              "label": "revokedVestings",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "VestingVault",
              "src": "contracts/VestingVault.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VestingSchedule)2088_storage)": {
              "label": "mapping(address => struct VestingVault.VestingSchedule)",
              "numberOfBytes": "32"
            },
            "t_struct(VestingSchedule)2088_storage": {
              "label": "struct VestingVault.VestingSchedule",
              "members": [
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "released",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:VRFConsumerBase": {
        "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:101",
        "inherit": [
          "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol:VRFRequestIDBase"
        ],
        "libraries": [],
        "methods": [
          "rawFulfillRandomness(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VRFConsumerBase",
            "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:183"
          },
          {
            "kind": "state-variable-immutable",
            "name": "LINK",
            "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:168"
          },
          {
            "kind": "state-variable-immutable",
            "name": "vrfCoordinator",
            "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "VRFConsumerBase",
              "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:174"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol:VRFRequestIDBase": {
        "src": "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol:4",
        "version": {
          "withMetadata": "7e209d18be9c9a05777cc872267e57499808415c4bd7eee97e5baee89f753fe0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:LinkTokenInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "decimals()",
          "decreaseApproval(address,uint256)",
          "increaseApproval(address,uint256)",
          "name()",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/FeeDistributor.sol:FeeDistributor": {
        "src": "contracts/FeeDistributor.sol:8",
        "version": {
          "withMetadata": "362ec4aa97f9072afdca54400b4b78fec9bbaaccb6fde66df77c5561897eba64",
          "withoutMetadata": "117670a14673c3fa94d7fa2b728521a200983c866adc9c3c40eebf81b4f52b82",
          "linkedWithoutMetadata": "117670a14673c3fa94d7fa2b728521a200983c866adc9c3c40eebf81b4f52b82"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "distribute()",
          "setShares(uint256,uint256,uint256)",
          "setRecipients(address,address,address)",
          "setPaused(bool)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeDistributor",
            "src": "contracts/FeeDistributor.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/FeeDistributor.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryShare",
            "src": "contracts/FeeDistributor.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "teamShare",
            "src": "contracts/FeeDistributor.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "buybackShare",
            "src": "contracts/FeeDistributor.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:10"
            },
            {
              "label": "team",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:11"
            },
            {
              "label": "buybackPool",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:12"
            },
            {
              "label": "treasuryShare",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:14"
            },
            {
              "label": "teamShare",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:15"
            },
            {
              "label": "buybackShare",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:16"
            },
            {
              "label": "distributionPaused",
              "offset": 0,
              "slot": "8",
              "type": "t_bool",
              "contract": "FeeDistributor",
              "src": "contracts/FeeDistributor.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIStaking.sol:IMALIStaking": {
        "src": "contracts/IMALIStaking.sol:9",
        "version": {
          "withMetadata": "721448700058c1acd9b43f33364551411ce65f67862dfe104547e3075581951f",
          "withoutMetadata": "85becebc5e3f51b60afe1e4227cdcb3e478d61fdcf2ef39a32de2e455e902b15",
          "linkedWithoutMetadata": "85becebc5e3f51b60afe1e4227cdcb3e478d61fdcf2ef39a32de2e455e902b15"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "stakeIMALI(uint256,uint256[])",
          "stakeLP(uint256,uint256[])",
          "unstakeIMALI(uint256)",
          "unstakeLP(uint256)",
          "claimRewards()",
          "setNFTMultipliers(uint256[],uint256[])",
          "setFeeRecipient(address)",
          "setEmergencyPause(bool)",
          "recoverERC20(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIStaking",
            "src": "contracts/IMALIStaking.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/IMALIStaking.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lpToken",
            "src": "contracts/IMALIStaking.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContract",
            "src": "contracts/IMALIStaking.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "imaliRewardRate",
            "src": "contracts/IMALIStaking.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lpRewardRate",
            "src": "contracts/IMALIStaking.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "imaliStakers",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(StakeInfo)1045_storage)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:21"
            },
            {
              "label": "lpStakers",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_struct(StakeInfo)1045_storage)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:22"
            },
            {
              "label": "nftTierMultipliers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:23"
            },
            {
              "label": "userBoostMultiplier",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:24"
            },
            {
              "label": "imaliRewardRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:26"
            },
            {
              "label": "lpRewardRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:27"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:30"
            },
            {
              "label": "emergencyPaused",
              "offset": 20,
              "slot": "8",
              "type": "t_bool",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_struct(StakeInfo)1045_storage)": {
              "label": "mapping(address => struct IMALIStaking.StakeInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(StakeInfo)1045_storage": {
              "label": "struct IMALIStaking.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "rewardMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/LPLottery.sol:LPLottery": {
        "src": "contracts/LPLottery.sol:8",
        "version": {
          "withMetadata": "7f7ab7f084f907cb72f1b6dd7c1fc6ff12cdcac2d42e4cc9fbb386d68e7d19e6",
          "withoutMetadata": "0b26910619d399ed04a5cedfb56b285ca5b9af98341f79fb86d3e8d3accaa4f5",
          "linkedWithoutMetadata": "0b26910619d399ed04a5cedfb56b285ca5b9af98341f79fb86d3e8d3accaa4f5"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:VRFConsumerBase",
          "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol:VRFRequestIDBase"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,bytes32,uint256)",
          "enterLottery(uint256)",
          "drawWinner()",
          "setLotteryActive(bool)",
          "emergencyWithdraw()",
          "withdrawLink()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLottery",
            "src": "contracts/LPLottery.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lpToken",
            "src": "contracts/LPLottery.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lotteryDuration",
            "src": "contracts/LPLottery.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "nonces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "VRFConsumerBase",
              "src": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:174"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "lotteryDuration",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:10"
            },
            {
              "label": "lastLotteryTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:11"
            },
            {
              "label": "prizePool",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:12"
            },
            {
              "label": "tickets",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:14"
            },
            {
              "label": "participants",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_address)dyn_storage",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:15"
            },
            {
              "label": "lotteryActive",
              "offset": 0,
              "slot": "7",
              "type": "t_bool",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:16"
            },
            {
              "label": "keyHash",
              "offset": 0,
              "slot": "8",
              "type": "t_bytes32",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:19"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:20"
            },
            {
              "label": "randomResult",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "LPLottery",
              "src": "contracts/LPLottery.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "0c91485d6a6ff3c57540d8ba825bf5f69d5837b412b3a6e7ea480a9911880f86",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIToken.sol:IMALIToken": {
        "src": "contracts/IMALIToken.sol:7",
        "version": {
          "withMetadata": "394f36d645613bc944b77156773befe0381698d79ff5df84cbc6beccdab7de57",
          "withoutMetadata": "79efbcaa00d9ce76861fe52323627489610fb06f57c126968eca19600ee43fbd",
          "linkedWithoutMetadata": "79efbcaa00d9ce76861fe52323627489610fb06f57c126968eca19600ee43fbd"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "mint(address,uint256)",
          "airdrop(address[],uint256)",
          "buyTokens()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIToken",
            "src": "contracts/IMALIToken.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "marketingWallet",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "IMALIToken",
              "src": "contracts/IMALIToken.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIDAO.sol:IMALIDAO": {
        "src": "contracts/IMALIDAO.sol:7",
        "version": {
          "withMetadata": "2944935037bde6ce57e002b9b00eb2b0d6246bb6ffed33257b136bc3e4b22a09",
          "withoutMetadata": "772f780b33845e69bafbebce7327ff09f5caeba7cd1d4d877686ea984dea7c11",
          "linkedWithoutMetadata": "772f780b33845e69bafbebce7327ff09f5caeba7cd1d4d877686ea984dea7c11"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "propose(string)",
          "vote(uint256,bool)",
          "execute(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIDAO",
            "src": "contracts/IMALIDAO.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "governanceToken",
            "src": "contracts/IMALIDAO.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(Proposal)238_storage)dyn_storage",
              "contract": "IMALIDAO",
              "src": "contracts/IMALIDAO.sol:17"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "IMALIDAO",
              "src": "contracts/IMALIDAO.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Proposal)238_storage)dyn_storage": {
              "label": "struct IMALIDAO.Proposal[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)238_storage": {
              "label": "struct IMALIDAO.Proposal",
              "members": [
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votesFor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesAgainst",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/Presale.sol:Presale": {
        "src": "contracts/Presale.sol:8",
        "version": {
          "withMetadata": "60f61c90fcf92ba287bb3b67cf43e2338897ca36cb65f7f50a1d44f2c4fd14cc",
          "withoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68",
          "linkedWithoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "participate()",
          "claimRefund()",
          "completePresale()",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts/Presale.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/Presale.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "presaleEndTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:13"
            },
            {
              "label": "totalRaised",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Presale",
              "src": "contracts/Presale.sol:14"
            },
            {
              "label": "contributions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Presale",
              "src": "contracts/Presale.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "0c91485d6a6ff3c57540d8ba825bf5f69d5837b412b3a6e7ea480a9911880f86",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "39751b1c4038db0f0b3b9313d4896d39b9b236e0e91fc301f905c952a2163630",
          "withoutMetadata": "fe851cd5cc0c1753ff5ad91f608b27c3236e63321bf41db07de90e8475a3d432",
          "linkedWithoutMetadata": "fe851cd5cc0c1753ff5ad91f608b27c3236e63321bf41db07de90e8475a3d432"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "abadb293193b24376d1e17ddfab331718c7199b1f075348c7f460d744576f54f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "d7cd8ba4b34c01d538d022323f3f19e6adf728799027ae05d6b3bc385faf789e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bd1e2b5b60f3d19d1b3cabeff91b4e7fe3a46bc3a9e89bc894a76a9fa9d47b19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "2008646e8fb26499dfddf3e24c6532d85f6d04d1d85f00bedf1b4806ec0319c6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/DAO.sol:IMALIDAO": {
        "src": "contracts/DAO.sol:7",
        "version": {
          "withMetadata": "853fa41c1f1708dfd4ed0d29754cc9cddadb7254f53ec9012b7c0e0614fb59b7",
          "withoutMetadata": "772f780b33845e69bafbebce7327ff09f5caeba7cd1d4d877686ea984dea7c11",
          "linkedWithoutMetadata": "772f780b33845e69bafbebce7327ff09f5caeba7cd1d4d877686ea984dea7c11"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "propose(string)",
          "vote(uint256,bool)",
          "execute(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIDAO",
            "src": "contracts/DAO.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "governanceToken",
            "src": "contracts/DAO.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(Proposal)3723_storage)dyn_storage",
              "contract": "IMALIDAO",
              "src": "contracts/DAO.sol:17"
            },
            {
              "label": "hasVoted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "IMALIDAO",
              "src": "contracts/DAO.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Proposal)3723_storage)dyn_storage": {
              "label": "struct IMALIDAO.Proposal[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)3723_storage": {
              "label": "struct IMALIDAO.Proposal",
              "members": [
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votesFor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "votesAgainst",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALILending.sol:IMALILending": {
        "src": "contracts/IMALILending.sol:10",
        "version": {
          "withMetadata": "b710c92fe5aa9098bf90f7e6a76da3950e725f7fa1f524b3b3572fb85b01f336",
          "withoutMetadata": "62cd2f25b4cda60914b80bc3270cb94e7f6749c213a6cc0fa9f5823ab2dfe85a",
          "linkedWithoutMetadata": "62cd2f25b4cda60914b80bc3270cb94e7f6749c213a6cc0fa9f5823ab2dfe85a"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setCollateralParameters(address,address,uint256)",
          "depositCollateral(address,uint256)",
          "withdrawCollateral(address,uint256)",
          "borrow(uint256,address)",
          "repay(uint256,uint256)",
          "liquidate(address,uint256)",
          "supply(uint256)",
          "withdrawSupply(uint256)",
          "calculateAccruedInterest(address,uint256)",
          "getTokenPrice(address)",
          "getCollateralValue(address,address)",
          "updateSupplyRate(uint256)",
          "updateBorrowRate(uint256)",
          "updateDepositFee(uint256)",
          "updateBorrowFee(uint256)",
          "updateLiquidationThreshold(uint256)",
          "updateAnnualInterestRate(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALILending",
            "src": "contracts/IMALILending.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stablecoin",
            "src": "contracts/IMALILending.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "collateralBalances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:19"
            },
            {
              "label": "borrowRecords",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Borrow)3921_storage))",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:22"
            },
            {
              "label": "borrowCount",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:23"
            },
            {
              "label": "supplyBalances",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:26"
            },
            {
              "label": "collateralRatios",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:32"
            },
            {
              "label": "priceFeeds",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)45)",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:33"
            },
            {
              "label": "supplyRate",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:36"
            },
            {
              "label": "borrowRate",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:37"
            },
            {
              "label": "depositFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:38"
            },
            {
              "label": "borrowFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:39"
            },
            {
              "label": "liquidationThreshold",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:40"
            },
            {
              "label": "annualInterestRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "IMALILending",
              "src": "contracts/IMALILending.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_contract(AggregatorV3Interface)45)": {
              "label": "mapping(address => contract AggregatorV3Interface)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Borrow)3921_storage))": {
              "label": "mapping(address => mapping(uint256 => struct IMALILending.Borrow))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Borrow)3921_storage)": {
              "label": "mapping(uint256 => struct IMALILending.Borrow)",
              "numberOfBytes": "32"
            },
            "t_struct(Borrow)3921_storage": {
              "label": "struct IMALILending.Borrow",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "borrowTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "collateralToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accruedInterest",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALINFT.sol:IMALINFT": {
        "src": "contracts/IMALINFT.sol:7",
        "version": {
          "withMetadata": "66ea6b9d7bafa75446371994279c7912d1296e46e1820fbf7acf5f47a648f2a0",
          "withoutMetadata": "a04b42c75bd7c1ecb8b374abe7412cc1112c9738092da7bbfb5ffb0f146659d7",
          "linkedWithoutMetadata": "a04b42c75bd7c1ecb8b374abe7412cc1112c9738092da7bbfb5ffb0f146659d7"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address)",
          "airdrop(address[])",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALINFT",
            "src": "contracts/IMALINFT.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "nextTokenId",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "IMALINFT",
              "src": "contracts/IMALINFT.sol:8"
            },
            {
              "label": "baseURI",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "IMALINFT",
              "src": "contracts/IMALINFT.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIStaking.sol:IMALIStaking": {
        "src": "contracts/IMALIStaking.sol:8",
        "version": {
          "withMetadata": "29fc9d5649c8c33efb0420df317c8ec44c6383d2e121665dc25418e6cc38eab7",
          "withoutMetadata": "04604a7d91579cda493beeaf4958b4fd8c6f29d9464f8d9dba1f70d64f3e8b5b",
          "linkedWithoutMetadata": "04604a7d91579cda493beeaf4958b4fd8c6f29d9464f8d9dba1f70d64f3e8b5b"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "stakeIMALI(uint256)",
          "stakeLP(uint256)",
          "unstakeIMALI(uint256)",
          "unstakeLP(uint256)",
          "claimRewards()",
          "setRewardRates(uint256,uint256)",
          "setFeeSettings(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIStaking",
            "src": "contracts/IMALIStaking.sol:39"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/IMALIStaking.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lpToken",
            "src": "contracts/IMALIStaking.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "imaliRewardRate",
            "src": "contracts/IMALIStaking.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lpRewardRate",
            "src": "contracts/IMALIStaking.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "imaliFeePercentage",
            "src": "contracts/IMALIStaking.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lpFeePercentage",
            "src": "contracts/IMALIStaking.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "imaliRewardRate",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:13"
            },
            {
              "label": "lpRewardRate",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:14"
            },
            {
              "label": "imaliFeePercentage",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:16"
            },
            {
              "label": "lpFeePercentage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:17"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:19"
            },
            {
              "label": "imaliStakers",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(StakeInfo)5094_storage)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:27"
            },
            {
              "label": "lpStakers",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_struct(StakeInfo)5094_storage)",
              "contract": "IMALIStaking",
              "src": "contracts/IMALIStaking.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(StakeInfo)5094_storage)": {
              "label": "mapping(address => struct IMALIStaking.StakeInfo)",
              "numberOfBytes": "32"
            },
            "t_struct(StakeInfo)5094_storage": {
              "label": "struct IMALIStaking.StakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIToken.sol:IMALIToken": {
        "src": "contracts/IMALIToken.sol:7",
        "version": {
          "withMetadata": "67818c05ac5e218228b231102acf90077f8bbc70139956d2c544371d80cba12c",
          "withoutMetadata": "eec9756ea49799cc58d93874b5a4a62b1b992cafdbb51dbab137fa57827955b5",
          "linkedWithoutMetadata": "eec9756ea49799cc58d93874b5a4a62b1b992cafdbb51dbab137fa57827955b5"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mint(address,uint256)",
          "airdrop(address[],uint256)",
          "buyTokens()",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIToken",
            "src": "contracts/IMALIToken.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/IMALIYieldFarming.sol:IMALIYieldFarming": {
        "src": "contracts/IMALIYieldFarming.sol:7",
        "version": {
          "withMetadata": "bd473076057fb57fbcbc640456b6cf2050423621039255d6fa359cd435d8ba30",
          "withoutMetadata": "46e82d55e241c625d0be3913f5940836934dd7c0c346449119958b9e6120b098",
          "linkedWithoutMetadata": "46e82d55e241c625d0be3913f5940836934dd7c0c346449119958b9e6120b098"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "stake(uint256)",
          "unstake(uint256)",
          "claimRewards()",
          "earned(address)",
          "rewardPerToken()",
          "setFeePercentage(uint256)",
          "setFeeRecipient(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIYieldFarming",
            "src": "contracts/IMALIYieldFarming.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/IMALIYieldFarming.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lpToken",
            "src": "contracts/IMALIYieldFarming.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/IMALIYieldFarming.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feePercentage",
            "src": "contracts/IMALIYieldFarming.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "rewardRate",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:11"
            },
            {
              "label": "totalStaked",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:12"
            },
            {
              "label": "lastUpdated",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:13"
            },
            {
              "label": "rewardPerTokenStored",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:14"
            },
            {
              "label": "feePercentage",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:16"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:17"
            },
            {
              "label": "stakedLpTokens",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:19"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:20"
            },
            {
              "label": "userRewardPerTokenPaid",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALIYieldFarming",
              "src": "contracts/IMALIYieldFarming.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/LPToken.sol:LPToken": {
        "src": "contracts/LPToken.sol:7",
        "version": {
          "withMetadata": "68d9c56a1a37541c7a9fe3098dfd0ba4358d9be13f2e4691050e0cdb6d38532f",
          "withoutMetadata": "70c79144ad54e45fe8faaa379c17cf114a983c5acd8028075948c847a0823fef",
          "linkedWithoutMetadata": "70c79144ad54e45fe8faaa379c17cf114a983c5acd8028075948c847a0823fef"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPToken",
            "src": "contracts/LPToken.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/MockPriceFeed.sol:MockPriceFeed": {
        "src": "contracts/MockPriceFeed.sol:6",
        "version": {
          "withMetadata": "f322849efddcd093c00f7e1954fe83bca123590c1dd4d0459027f654c6561cf8",
          "withoutMetadata": "a667c79e98062d316439a75d39f92f23d6ad3a4d7df3e1f67b49df5809df7455",
          "linkedWithoutMetadata": "a667c79e98062d316439a75d39f92f23d6ad3a4d7df3e1f67b49df5809df7455"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface"
        ],
        "libraries": [],
        "methods": [
          "(int256)",
          "latestRoundData()",
          "getRoundData(uint80)",
          "decimals()",
          "description()",
          "version()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockPriceFeed",
            "src": "contracts/MockPriceFeed.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimals",
            "src": "contracts/MockPriceFeed.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockPriceFeed",
              "src": "contracts/MockPriceFeed.sol:7"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/MockStablecoin.sol:MockStablecoin": {
        "src": "contracts/MockStablecoin.sol:6",
        "version": {
          "withMetadata": "92f85ade8b9ce29484ab193ba8d1e27b3bb3b505419d2674872069cd3145a756",
          "withoutMetadata": "4398dc2912cba5dc3dc6c9afa3e25e58cff1118d7533929d23618375f95c178e",
          "linkedWithoutMetadata": "4398dc2912cba5dc3dc6c9afa3e25e58cff1118d7533929d23618375f95c178e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockStablecoin",
            "src": "contracts/MockStablecoin.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/Presale.sol:IMALIPresale": {
        "src": "contracts/Presale.sol:8",
        "version": {
          "withMetadata": "fc716e458a154751b05c9b9b1857ff497f0fb7e0228e3bc341ac386e8c0d32c8",
          "withoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68",
          "linkedWithoutMetadata": "2d5c4d229a0d26ead938ad8567b12966e9979b3e8966ea08ae8d660970ef9c68"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "participate()",
          "claimRefund()",
          "completePresale()",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IMALIPresale",
            "src": "contracts/Presale.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "imaliToken",
            "src": "contracts/Presale.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "presaleEndTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "IMALIPresale",
              "src": "contracts/Presale.sol:13"
            },
            {
              "label": "totalRaised",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "IMALIPresale",
              "src": "contracts/Presale.sol:14"
            },
            {
              "label": "contributions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "IMALIPresale",
              "src": "contracts/Presale.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}